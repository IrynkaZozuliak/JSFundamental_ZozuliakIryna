//Завдання 1

function sumSliceArray(arr, first, second) {
  if (!Number.isInteger(first) || !Number.isInteger(second)) {
    throw new Error('Параметри first та second повинні бути цілими числами.');
  }

  if (first < 0  second < 0  first >= arr.length || second >= arr.length) {
    throw new Error('Параметри first та second виходять за межі допустимого діапазону.');
  }

  return arr[first] + arr[second];
}

// Приклад використання функції та обробки винятків
try {
  const array = [1, 2, 3, 4, 5, 6];
  const firstIndex = 2;
  const secondIndex = 4;

  const result = sumSliceArray(array, firstIndex, secondIndex);
  console.log('Результат:', result);
} catch (error) {
  console.error('Сталася помилка:', error.message);
}


//Завдання2
function checkAge() {
  try {
    const name = prompt('Введіть ваше ім\'я:');
    const age = prompt('Введіть ваш вік:');
    const status = prompt('Введіть ваш статус (адмін, модератор, користувач):');

    if (!age.trim()) {
      throw new Error('The field is empty! Please enter your age');
    }

    const numericAge = Number(age);
    if (isNaN(numericAge)) {
      throw new EvalError('Invalid age value');
    }

    if (numericAge < 18 || numericAge > 70) {
      throw new RangeError('Age is out of range');
    }

    if (status !== 'адмін' && status !== 'модератор' && status !== 'користувач') {
      throw new EvalError('Invalid status');
    }

    alert('Ви маєте доступ до перегляду фільму.');
  } catch (error) {
    alert('Сталася помилка: ' + error.name + '\n' + error.message);
  }
}

// Виклик функції checkAge()
checkAge();



//Завдання 3
function calcRectangleArea(width, height) {
  if (typeof width !== 'number' || typeof height !== 'number') {
    throw new TypeError('Параметри повинні бути числами.');
  }

  return width * height;
}

// Приклад використання функції та обробки винятків
try {
  const width = 10;
  const height = '5';

  const area = calcRectangleArea(width, height);
  console.log('Площа прямокутника:', area);
} catch (error) {
  console.error('Сталася помилка:', error.message);
}

//Завдання4
class MonthException extends Error {
  constructor(message) {
    super(message);
    this.name = 'MonthException';
  }
}

function showMonthName(month) {
  const monthNames = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
  ];

  if (month < 1 || month > 12) {
    throw new MonthException('Incorrect month number');
  }

  return monthNames[month - 1];
}

// Приклад використання функції та обробки винятків
try {
  console.log(showMonthName(5));
  console.log(showMonthName(14));
} catch (error) {
  if (error instanceof MonthException) {
    console.error(${error.name} ${error.message});
  } else {
    console.error('Сталася помилка:', error.message);
  }
}


//Завдання5

function showUser(id) {
  if (id < 0) {
    throw new Error('ID must not be negative: ' + id);
  }

  return { id };
}

function showUsers(ids) {
  const validUsers = [];

  for (let id of ids) {
    try {
      const user = showUser(id);
      validUsers.push(user);
    } catch (error) {
      console.error(error.message);
    }
  }

  return validUsers;
}

// Приклад використання функції showUsers(ids)
const users = showUsers([7, -12, 44, 22]);
console.log(users);

